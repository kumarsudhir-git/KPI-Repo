@using KPI.Classes;
@model KPILib.Models.PurchaseMaster
@{
    ViewBag.Title = "Purchase Order - New";
    Layout = "~/Views/Shared/_MainLayout.cshtml";
}

<div class="top_header">
    <h2>@ViewBag.Title</h2>
    <div class="back_btn">
        @Html.ActionLink("Back to List", "GetAll")
    </div>
</div>
  

@using (Html.BeginForm("Add", "Purchase"))
{
    @Html.AntiForgeryToken()


    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

<div class="row">
    <div class="col-md-6">
        <div class="row">

            <div class="col-md-3 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.PurchaseID, htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.DisplayFor(model => model.PurchaseID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.HiddenFor(model => model.PurchaseID)
                    @*@Html.ValidationMessageFor(model => model.PurchaseDate, "", new { @class = "text-danger" })*@
                </div>
            </div>
            <div class="col-md-3 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.PurchaseDate, htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.EditorFor(model => model.PurchaseDate, new { htmlAttributes = new { @class = "form-control datepicker" }, type = "date" })
                    @Html.ValidationMessageFor(model => model.PurchaseDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-3 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-3 col-sm-12 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.User, htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.EditorFor(model => model.User, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.User, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>

        <div class="row">
            <div class="col-md-3 col-sm-12">
                <div class="form-group">
                    @Html.Label("Is Vendor", new { @class = "control-label" })
                    <div class="checkbox">
                        @Html.RadioButton("VendorType", "VD001", new { @onchange = "LoadVendorData(this)" })
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-sm-12">
                <div class="form-group">
                    @Html.Label("Is KPI Labour", htmlAttributes: new { @class = "control-label" })
                    <div class="checkbox">
                        @Html.RadioButton("VendorType", "VD002", new { @onchange = "LoadVendorData(this)" })
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.CompanyLocation, htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.DropDownListFor(model => model.CompanyLocationID, null, "--Select Company and Location--", new { @class = "form-control", style = "max-width:100%;" })
                    @Html.ValidationMessageFor(model => model.CompanyLocationID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-12  col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.Instructions, htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextAreaFor(model => model.Instructions, new { htmlAttributes = new { @class = "form-control" }, @rows = 6, @cols = 1000, style = "max-width:100%;" })
                    @Html.ValidationMessageFor(model => model.Instructions, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-primary" />
                </div>
            </div>
        </div>

    </div>
    <div class="col-md-6">

        <div class="top_header">

            <h4>Line Items</h4>


            <div class="">
                <input type="button" value="Add Line Item" class="btn btn-primary btn-sm" onclick="AddLineItemRow()" />
            </div>
        </div>


        <div class="table-responsive">
            <table class="table" id="PurchaseOrderTbl">
                <thead>
                    <tr>
                        @*<th></th>*@
                        @*<th>
                                Purchase Detail ID
                            </th>*@
                        <th>
                            Raw Material
                        </th>
                        <th>
                            Qty (in Kgs)
                        </th>
                        <th>
                            Qty (in Bags)
                        </th>
                        <th>
                            Spl. Instructions
                        </th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @*@foreach (var item in Model.LineItems)
                        {
                            Html.RenderPartial("_PurchaseLineItems", item);
                        }*@

                    @{
                        Html.RenderAction("PurchaseLineItemsPartialAction");
                    }
                </tbody>
            </table>
        </div>

        </div>
       
    </div>
    }


    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }

    @*<script>
            $("#add").click(function () {
                string row = "<tr><td width='70px'></td><td>@Html.DropDownListFor(model => model.RawMatarialID, ViewBag.Materials as SelectList, "--Select Raw Material--", new { @class = "form-control" }) @Html.ValidationMessageFor(model => model.RawMatarialID, "", new { @class = "text-danger" })</td><td>@Html.EditorFor(model => model.Qty, new { htmlAttributes = new { @class = "form-control" } })@Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })</td></tr>";
                $("#tbodyval").append(row);
            });
        </script>*@

    <script>
        $(document).ready(function () {
        });

    function AddLineItemRow() {

        var strURL = "/Purchase/PurchaseLineItemsPartialAction";
        var selector = "#PurchaseOrderTbl tbody";
        AddLineItemRowGeneric(strURL, "GET", selector);

        //$.ajax({
        //    url: "/Purchase/PurchaseLineItemsPartialAction",
        //    method: "GET",
        //    contentType: "application/json",
        //    success: function (data) {

        //        if (data != null) {
        //            $("#PurchaseOrderTbl tbody").append(data);
        //        }
        //        else {
        //            alert("Server error");
        //            return false;
        //        }
        //    },
        //    error: function (result) {
        //        console.log(result);
        //        alert('Error occured');
        //        return false;
        //    }
        //})
    }

    //function DeleteLineItemRow(obj) {
    //    $(obj).closest('tr').remove();
    //}

        function deleteRow(btn) {
            btn.parentNode.parentNode.remove();
            //alert("Hi");
        }

    function addRow() {
        if (@Model.Materials.Count > 0)
        {
            //var materials = JSON.stringify(@Html.Raw(Model.Materials.ToArray()));
            var vals = [{ "id": 101, "name": "rm 101" }, { "id": 102, "name": "rm 102" }, { "id": 103, "name": "rm 103" }, { "id": 104, "name": "rm 104" }, { "id": 105, "name": "rm 105" }];

            var tbl = document.getElementById("tblLineItems");
            var row = tbl.insertRow(-1);

            var cellDel = row.insertCell(-1);
            var btn = document.createElement("button");
            btn.innerText = "Delete";
            btn.setAttribute("class", "btn btn-danger");
            btn.setAttribute("onclick", "deleteRow(this);");
            cellDel.appendChild(btn);

            var cellDdl = row.insertCell(-1);
            var ddl = document.createElement("select");
            ddl.name = "LineItems.RawMaterialID";

            for (const val of vals) {
                var ddlVal = document.createElement("option");
                ddlVal.value = val.id;
                ddlVal.text = val.name;
                ddl.appendChild(ddlVal);
            }
            cellDdl.appendChild(ddl);

            var cellQty = row.insertCell(-1);
            var txt = document.createElement("input");
            txt.name = "LineItems.Qty";
            txt.setAttribute("class", "form-control");
            txt.value = tbl.childNodes.length;
            cellQty.appendChild(txt);

            //alert("Hi");
        }
    }

    function LoadVendorData(obj) {

        var $vendorData = $('#CompanyLocationID');    // Cache the state dropdown

        // Clear the state dropdown
        $vendorData.empty();
        $vendorData.append('<option value="">--Select Company and Location--</option>'); // Add the default option

        var vendorId = $(obj).val();

        if (vendorId != null && vendorId != '' && vendorId != undefined) {

            $.ajax({
                url: '/Purchase/GetVendorWithLocationData',
                type: 'POST',
                data: { vendorType: vendorId },
                dataType: 'json',
                success: function (response) {
                    // Loop through the response and populate the state dropdown
                    $.each(response, function (index, elem) {
                        $vendorData.append($('<option>', {
                            value: elem.VendorId,
                            text: elem.VendorName
                        }));
                    });
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching states: " + error);
                }
            });
        }
        else {
            return false;
        }

    }

    </script>
