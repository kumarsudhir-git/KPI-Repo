@model KPILib.Models.Mould

@{
    ViewBag.Title = "New";
    Layout = "~/Views/Shared/_MainLayout.cshtml";
}

@*<h2>New</h2>*@


@using (Html.BeginForm("Add", "Mould"))
{
    @Html.AntiForgeryToken()

    <div class="row" id="HiddenMouldId">
        <span class="RoleId">@Html.HiddenFor(Model => Model.MouldID)</span>
    </div>
    <div class="top_header">
        <h4>Mould</h4>
        <div class="back_btn">
            @*<input type="button" value="Back" class="btn btn-danger" onclick="window.location.href='/Mould/GetAll'" />*@
            @Html.ActionLink("Back to List", "GetAll")
        </div>
    </div>

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="row">
        <div class="col-md-3">
            @Html.LabelFor(model => model.MouldName, htmlAttributes: new { @class = "control-label" })
            <div class="">
                @Html.EditorFor(model => model.MouldName, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Mould Name" } })
                @Html.ValidationMessageFor(model => model.MouldName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-3">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
            <div class="">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Description" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-3">
            @Html.LabelFor(model => model.MouldTypeID, htmlAttributes: new { @class = "control-label" })
            <div class="">
                @Html.DropDownListFor(model => model.MouldTypeID, null, "--Select--", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MouldTypeID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-3">
            @Html.LabelFor(model => model.LocationId, htmlAttributes: new { @class = "control-label" })
            <div class="">
                @Html.DropDownListFor(model => model.LocationId, null, "--Select--", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="col-md-3">
            <div class="form-group">
                @Html.LabelFor(model => model.LastMaintenanceDate, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    <div class="">
                        @Html.TextBoxFor(model => model.LastMaintenanceDate, "{0:dd/MMM/yyyy}", new { @class = "form-control datepicker", @onchange = "SetLastMaintainanceDate(this)", @placeholder = "Enter Last Maintenance Date", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.LastMaintenanceDate, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                @Html.LabelFor(model => model.MaintenanceFrequency, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    <div class="">
                        @Html.EditorFor(model => model.MaintenanceFrequency, new { htmlAttributes = new { @class = "form-control", @onchange = "SetLastMaintainanceDate(this)", @placeholder = "Enter Maintenance Frequency" } })
                        @Html.ValidationMessageFor(model => model.MaintenanceFrequency, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                @Html.LabelFor(model => model.MaintenanceDueDate, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    <div class="">
                        @Html.TextBoxFor(model => model.MaintenanceDueDate, "{0:dd/MMM/yyyy}", new { @class = "form-control", @placeholder = "Enter Maintenance Due Date", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.MaintenanceDueDate, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                @Html.LabelFor(model => model.DueInDays, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    <div class="">
                        @Html.EditorFor(model => model.DueInDays, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Due In Days", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.DueInDays, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                @Html.LabelFor(model => model.PurchaseDate, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    <div class="">
                        @Html.TextBoxFor(model => model.PurchaseDate, "{0:dd/MMM/yyyy}", new { @class = "form-control datepicker", @placeholder = "Enter Date Of Purchase", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.PurchaseDate, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="form-group">
                @Html.LabelFor(model => model.TotalCavities, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.TotalCavities, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Total Cavities" } })
                        @Html.ValidationMessageFor(model => model.TotalCavities, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                @Html.LabelFor(model => model.RunningCavities, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.RunningCavities, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Running Cavities" } })
                        @Html.ValidationMessageFor(model => model.RunningCavities, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                @Html.LabelFor(model => model.CorePins, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.CorePins, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Core Pins" } })
                        @Html.ValidationMessageFor(model => model.CorePins, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                @Html.LabelFor(model => model.IsDiscontinued, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.IsDiscontinued)
                        @Html.ValidationMessageFor(model => model.IsDiscontinued, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

    </div>


    <div class="row">
        <div class="col-md-12">
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />

            </div>
        </div>
    </div>

}



@*<div class="col-md-12">
        <div class="row">
            <label>&nbsp;</label>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    @Html.ActionLink("Back to List", "GetAll")
                </div>
            </div>
        </div>
    </div>*@

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>

    function SetLastMaintainanceDate(obj) {
        // Read values
        var maintenanceDate = $('#LastMaintenanceDate').val();
        var maintenanceFrequency = $('#MaintenanceFrequency').val();

        if (!maintenanceDate || !maintenanceFrequency) return;

        var baseDate = new Date(maintenanceDate);
        var freq = parseInt(maintenanceFrequency, 10);

        if (isNaN(baseDate.getTime()) || isNaN(freq)) return;

        // --- Calculate Maintenance Due Date ---
        var dueDate = new Date(baseDate);
        dueDate.setDate(dueDate.getDate() + freq);

        // --- Format: 31-Oct-2025 ---
        var day = dueDate.getDate().toString().padStart(2, '0');
        var month = dueDate.toLocaleString('en-US', { month: 'short' });
        var year = dueDate.getFullYear();
        var formattedDueDate = `${day}-${month}-${year}`;

        // --- Calculate DueInDays (dueDate - today) ---
        var today = new Date();
        today.setHours(0, 0, 0, 0);
        var diffMs = dueDate - today;
        var dueInDays = Math.ceil(diffMs / (1000 * 60 * 60 * 24));

        // --- Set values into controls ---
        $('#MaintenanceDueDate').val(formattedDueDate); // readonly is fine
        $('#DueInDays').val(dueInDays);
    }

</script>