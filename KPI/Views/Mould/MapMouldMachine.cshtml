@model List<KPILib.Models.MouldMachineMapping>

@{
    ViewBag.Title = "Map Mould - Machine";
    Layout = "~/Views/Shared/_MainLayout.cshtml";

    var machineSelectList = ViewData["MachineID"] as SelectList;
    var mouldSelectList = ViewData["MouldID"] as SelectList;
}

<div class="form-horizontal">

    <div class="top_header">
        <h2>@ViewBag.Title</h2>
        <div class="back_btn">
            @Html.ActionLink("Back to List", "GetAllMouldMachineMappedData", new { id = ViewBag.TypeID })
        </div>
    </div>

    <div class="d-flex justify-content-end mb-2">
        <button type="button" class="btn btn-primary" id="addRow">
            <i class="fa fa-plus"></i> Add
        </button>
    </div>
    <div class="clearfix"></div>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="row">
            <table id="mappingTable" class="table help-page-table table-sm table-striped" cellspacing="0" style="border:1px solid #000">
                <thead>
                    <tr>
                        <th>Mould</th>
                        <th>Machine(s)</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Any())
                    {
                        for (int i = 0; i < Model.Count(); i++)
                        {
                            var mouldSelectListForRow = new SelectList(mouldSelectList, "Value", "Text", Model[i].MouldID);
                            <tr>
                                <td>
                                    @Html.DropDownListFor(modelItem => Model[i].MouldID, mouldSelectListForRow, "--Select--", new { @class = "form-control mould-select select2" })
                                </td>
                                <td>
                                    <select name="[@i].MachineID" class="form-control machine-select select2" multiple="multiple" data-placeholder="--Select Machine(s)--" style="width:100%;">
                                        @foreach (var machineIds in machineSelectList)
                                        {
                                            var selected = Model[i].MachineID.Contains(int.Parse(machineIds.Value)) ? "selected" : "";
                                            <option value="@machineIds.Value" @selected>@machineIds.Text</option>
                                        }
                                    </select>
                                </td>
                                <td>
                                    <a href="#" class="deleteRow" title="Delete"><i class="fa fa-trash text-danger" style="font-size:24px;"></i></a>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

        </div>

        <div class="row">
            <div class="form-group">
                <div class="col-md-12">
                    <input type="submit" value="Create" class="btn btn-primary" id="submitBtn" />
                    <input type="button" value="Reload" class="btn btn-danger" onclick="window.location.reload()" />
                </div>
            </div>
        </div>

    }

</div>

<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1055;">
    <div id="validationToast" class="toast border-0" role="alert" aria-live="assertive" aria-atomic="true"
         style="background-color: #dc3545; color: white; opacity: 1;">
        <div class="d-flex">
            <div class="toast-body" id="toastMessage">
                Validation error.
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>

    $(function () {
        updateDeleteIconsVisibility();
    })

    function updateDeleteIconsVisibility() {
        const rowCount = $('#mappingTable tbody tr').length;

        if (rowCount <= 1) {
            $('#mappingTable tbody tr .deleteRow').hide();
        } else {
            $('#mappingTable tbody tr .deleteRow').show();
        }
    }

    // Data from server
    var mouldOptions = @Html.Raw(Json.Encode(
    ((SelectList)ViewData["MouldID"]).Select(x => new { x.Value, x.Text })
    ));

    var machineOptions = @Html.Raw(Json.Encode(
        ((SelectList)ViewData["MachineID"]).Select(x => new { x.Value, x.Text })
    ));

    function getSelectedMouldIds() {
        return $('.mould-select').map(function () {
            return $(this).val();
        }).get().filter(v => v);
    }

    function generateMouldSelect(index) {
        let html = `<select class="form-control mould-select select2" name="[${index}].MouldID" style="width: 100%;">`;
        html += '<option value="">--Select--</option>';
        let selected = getSelectedMouldIds();
        mouldOptions.forEach(opt => {
            if (!selected.includes(opt.Value)) {
                html += `<option value="${opt.Value}">${opt.Text}</option>`;
            }
        });
        html += '</select>';
        return html;
    }

    function generateMachineMultiSelect(index) {
        let html = `<select multiple class="form-control machine-select select2" name="[${index}].MachineID" style="width: 100%;" data-placeholder="--Select Machine(s)--">`;
        machineOptions.forEach(opt => {
            html += `<option value="${opt.Value}">${opt.Text}</option>`;
        });
        html += '</select>';
        return html;
    }

    $('#addRow').click(function () {
        let index = $('#mappingTable tbody tr').length;
        let rowHtml = `<tr>
            <td>${generateMouldSelect(index)}</td>
            <td>${generateMachineMultiSelect(index)}</td>
            <td><a href="#" class="deleteRow"><i class="fa fa-trash text-danger" style="font-size: 24px;"></i></a></td>
        </tr>`;
        $('#mappingTable tbody').append(rowHtml);

        // Re-initialize Select2
        InitializeSelect2();
        updateDeleteIconsVisibility();
    });

    $(document).on('click', '.deleteRow', function (e) {
        e.preventDefault();
        $(this).closest('tr').remove();
        // Rebuild machine dropdowns after deletion
        refreshMouldDropdowns();
        updateDeleteIconsVisibility();
    });

    $(document).on('change', '.mould-select', function () {
        refreshMouldDropdowns();
    });

    function refreshMouldDropdowns() {
        let selectedMoulds = getSelectedMouldIds();

        $('.mould-select').each(function () {
            let $dropdown = $(this);
            let currentVal = $dropdown.val(); // get current value before refreshing
            let indexMatch = $dropdown.attr('name').match(/\[(\d+)\]/);
            if (!indexMatch) return;

            let index = indexMatch[1];

            $dropdown.empty().append('<option value="">--Select--</option>');
            mouldOptions.forEach(opt => {
                // allow selected machine or unselected machines
                if (!selectedMoulds.includes(opt.Value) || opt.Value === currentVal) {
                    let selected = opt.Value === currentVal ? 'selected' : '';
                    $dropdown.append(`<option value="${opt.Value}" ${selected}>${opt.Text}</option>`);
                }
            });

            $dropdown.trigger('change.select2'); // reinitialize Select2 display
        });
    }
    // Auto add one row if no data
    @if (Model == null || !Model.Any())
    {
        <text>
        $(document).ready(function () {
            $('#addRow').trigger('click');
        });
        </text>
    }

    $('#submitBtn').click(function (e) {
        if (!validateMappings()) {
            e.preventDefault(); // stop submission
        } else {
            // Optionally allow submit or make your ajax call
        }
    });

    function showToast(message) {
        $('#toastMessage').html(message);
        const toastEl = document.getElementById('validationToast');
        const toast = new bootstrap.Toast(toastEl, { delay: 10000 });
        toast.show();
    }

    function validateMappings() {
        let isValid = true;
        let errorMsg = "";

        $('#mappingTable tbody tr').each(function (index, row) {
            const mouldSelect = $(row).find('.mould-select');
            const machineSelect = $(row).find('.machine-select');

            const mouldId = mouldSelect.val();
            const selectedMachines = machineSelect.val();

            if (!mouldId || mouldId === "0") {
                isValid = false;
                errorMsg += `Row ${index + 1}: Please select a Mould.<br/>`;
            }

            if (mouldId && mouldId !== "0") {
                if (!selectedMachines || selectedMachines.length === 0) {
                    isValid = false;
                    errorMsg += `Row ${index + 1}: Please select at least one Machine for the selected Mould.<br/>`;
                }
            }
        });

        if (!isValid) {
            showToast(errorMsg);
        }

        return isValid;
    }

    //$(document).on('click', function () {
    //    $('#validationSummary').fadeOut();
    //});

    //$('#validationSummary').on('click', function (e) {
    //    e.stopPropagation(); // Prevent auto-hide when clicking on the error box
    //});

</script>