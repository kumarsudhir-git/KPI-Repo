@using KPI.Classes;
@model KPILib.Models.SalesMaster
@{
    ViewBag.Title = "Sales Order - New";
    Layout = "~/Views/Shared/_MainLayout.cshtml";
}

<div class="top_header">
    <h2>@ViewBag.Title</h2>
    <div class="back_btn">
        @Html.ActionLink("Back to List", "GetAll")
    </div>
</div>

@using (Html.BeginForm("Add", "Sales"))
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="col-md-12">
        <div class="row">
            <div class="col-md-3 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.Colour, htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(model => model.Colour, "", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Colour, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-3 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.Package, htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(model => model.Package, "", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Package, "", new { @class = "text-danger" })
                </div>
            </div><div class="col-md-3 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(model => model.Quantity, "", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                </div>
            </div><div class="col-md-3 col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.SampleRequired, htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.CheckBoxFor(model => model.SampleRequired)
                    @Html.ValidationMessageFor(model => model.SampleRequired, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="row">

                <div class="col-md-3 col-sm-12">
                    <div class="form-group">
                        @Html.LabelFor(model => model.SalesID, htmlAttributes: new { @class = "control-label col-md-12" })
                        @Html.DisplayFor(model => model.SalesID, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.HiddenFor(model => model.SalesID)
                        @*@Html.ValidationMessageFor(model => model.SalesDate, "", new { @class = "text-danger" })*@
                    </div>
                </div>
                <div class="col-md-3 col-sm-12">
                    <div class="form-group">
                        @Html.LabelFor(model => model.SalesDate, htmlAttributes: new { @class = "control-label col-md-12" })
                        @Html.EditorFor(model => model.SalesDate, new { htmlAttributes = new { @class = "form-control datepicker" }, type = "date" })
                        @Html.ValidationMessageFor(model => model.SalesDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-3 col-sm-12">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-12" })
                        @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-3 col-sm-12">
                    <div class="form-group">
                        @Html.LabelFor(model => model.User, htmlAttributes: new { @class = "control-label col-md-12" })
                        @Html.EditorFor(model => model.User, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                        @Html.ValidationMessageFor(model => model.User, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="col-md-4 col-sm-12">
                    <div class="form-group">
                        <label class="control-label col-md-12">Customer / Location</label>
                        @*@Html.DropDownListFor(model => model.CompanyLocationID, ViewBag.Locations as SelectList, "--Select Company and Location--", new { @class = "form-control", style = "max-width:100%;" })*@
                        @Html.DropDownListFor(model => model.CompanyLocationID, null, "--Select Company and Location--", new { @class = "form-control", style = "max-width:100%;" })
                        @Html.ValidationMessageFor(model => model.CompanyLocationID, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-4 col-sm-12">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Instructions, htmlAttributes: new { @class = "control-label col-md-12" })
                        @Html.TextAreaFor(model => model.Instructions, new { htmlAttributes = new { @class = "form-control" }, @rows = 6, @cols = 1000, style = "max-width:100%;" })
                        @Html.ValidationMessageFor(model => model.Instructions, "", new { @class = "text-danger" })
                    </div>
                </div>
                @if (Model.IsSalesRateAccess)
                {
                    <div class="col-md-4 col-sm-12">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Rate, htmlAttributes: new { @class = "control-label col-md-12" })
                            @Html.TextBoxFor(model => model.Rate, "", new { @class = "form-control", @placeholder = "Enter Rate" })
                            @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
            </div>

        </div>
        <div class="col-md-6">

            <div class="top_header">
                <h2>Line Items</h2>

                <!--<div class="col-md-6 text-right">-->
                @*<input type="button" value="Add Line Item" class="btn btn-primary  btn-sm" />*@
                <!--</div>-->

                <input type="button" value="Add Line Item" class="btn btn-primary btn-sm" onclick="AddLineItemRow()" />

            </div>
            <div class="table-responsive">
                <table class="table table-bordered" id="SalesOrderTbl">
                    <thead>
                        <tr>
                            @*<th></th>*@
                            @*<th>
                                    Sales Detail ID
                                </th>*@
                            <th>
                                Product
                            </th>
                            <th>
                                Qty
                            </th>
                            <th>
                                Spl. Instructions
                            </th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @*@foreach (var item in Model.LineItems)
                            {*@
                        @{
                            Html.RenderAction("GetSalesLineItemPartial");
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>


    <div class="form-group">
        <input type="submit" value="Save" class="btn btn-primary" />
    </div>

}




@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

@*<script>
        $("#add").click(function () {
            string row = "<tr><td width='70px'></td><td>@Html.DropDownListFor(model => model.RawMatarialID, ViewBag.Materials as SelectList, "--Select Raw Material--", new { @class = "form-control" }) @Html.ValidationMessageFor(model => model.RawMatarialID, "", new { @class = "text-danger" })</td><td>@Html.EditorFor(model => model.Qty, new { htmlAttributes = new { @class = "form-control" } })@Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })</td></tr>";
            $("#tbodyval").append(row);
        });
    </script>*@

<script>
    function AddLineItemRow() {

        var strURL = "/Sales/GetSalesLineItemPartial";
        var selector = "#SalesOrderTbl tbody";
        AddLineItemRowGeneric(strURL, "GET", selector);
    };

        function deleteRow(btn) {
            btn.parentNode.parentNode.remove();
            //alert("Hi");
        }

    function addRow() {
        if (@Model.Products.Count > 0)
        {
            @*var materials = JSON.stringify(@Html.Raw(Model.Products.ToArray()));*@
            var vals = [{ "id": 101, "name": "rm 101" }, { "id": 102, "name": "rm 102" }, { "id": 103, "name": "rm 103" }, { "id": 104, "name": "rm 104" }, { "id": 105, "name": "rm 105" }];

            var tbl = document.getElementById("tblLineItems");
            var row = tbl.insertRow(-1);

            var cellDel = row.insertCell(-1);
            var btn = document.createElement("button");
            btn.innerText = "Delete";
            btn.setAttribute("class", "btn btn-danger");
            btn.setAttribute("onclick", "deleteRow(this);");
            cellDel.appendChild(btn);

            var cellDdl = row.insertCell(-1);
            var ddl = document.createElement("select");
            ddl.name = "LineItems.ProductID";

            for (const val of vals) {
                var ddlVal = document.createElement("option");
                ddlVal.value = val.id;
                ddlVal.text = val.name;
                ddl.appendChild(ddlVal);
            }
            cellDdl.appendChild(ddl);

            var cellQty = row.insertCell(-1);
            var txt = document.createElement("input");
            txt.name = "LineItems.Qty";
            txt.setAttribute("class", "form-control");
            txt.value = tbl.childNodes.length;
            cellQty.appendChild(txt);

            //alert("Hi");
        }
    }
</script>